<!DOCTYPE html>
<html>
<head>
    <title>크롤러 관리</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            max-width: 1200px;
        }
        .crawler-card {
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            height: 100%;
        }
        .crawler-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .crawler-card.selected {
            border: 2px solid #0d6efd;
            background-color: #f8f9ff;
        }
        .card-img-top {
            height: 160px;
            object-fit: cover;
        }
        .log-container {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            background: #f9f9f9;
        }
        .stats-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-top: 15px;
        }
        .stat-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
        }
        .stat-item span:first-child {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }
        #crawlerForm {
            display: none;
        }
        #crawlerForm.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">크롤러 관리</h1>

        <!-- 크롤러 선택 섹션 -->
        <div class="row mb-4" id="crawlerSelection">
            <div class="col-md-6 mb-4">
                <div class="card crawler-card" data-crawler="vintage">
                    <img src="https://images.unsplash.com/photo-1595341888016-a392ef81b7de?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1179&q=80" class="card-img-top" alt="Vintage Shop">
                    <div class="card-body">
                        <h5 class="card-title">빈티지톡</h5>
                        <p class="card-text">빈티지톡의 상품을 크롤링합니다.</p>
                        <ul class="list-unstyled">
                            <li><small class="text-muted">✓ 상품 정보 수집</small></li>
                            <li><small class="text-muted">✓ 가격 정보 수집</small></li>
                            <li><small class="text-muted">✓ 이미지 URL 수집</small></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-4">
                <div class="card crawler-card" data-crawler="newCrawler">
                    <img src="https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80" class="card-img-top" alt="New Shop">
                    <div class="card-body">
                        <h5 class="card-title">새로운 크롤러</h5>
                        <p class="card-text">새로운 사이트의 상품을 크롤링합니다.</p>
                        <ul class="list-unstyled">
                            <li><small class="text-muted">✓ 상품 정보 수집</small></li>
                            <li><small class="text-muted">✓ 가격 정보 수집</small></li>
                            <li><small class="text-muted">✓ 이미지 URL 수집</small></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- 크롤링 설정 폼 -->
        <form id="crawlerForm" class="mb-4">
            <input type="hidden" id="selectedCrawler" name="crawler_type" value="">
            <div id="parameterContainer" class="row">
                <!-- 파라미터들이 여기에 동적으로 추가됩니다 -->
            </div>
            
            <div class="form-group">
                <button id="startCrawl" class="btn btn-primary" disabled>크롤링 시작</button>
                <button id="stopCrawl" class="btn btn-danger" disabled>크롤링 중지</button>
            </div>
        </form>

        <div id="stats" class="mt-4" style="display: none;">
            <h4>크롤링 통계</h4>
            <div class="stats-container">
                <div class="stat-item">
                    <span>총 처리된 상품:</span>
                    <span id="totalItems">0</span>
                </div>
                <div class="stat-item">
                    <span>신규 저장된 상품:</span>
                    <span id="newItems">0</span>
                </div>
                <div class="stat-item">
                    <span>기존 상품:</span>
                    <span id="existingItems">0</span>
                </div>
            </div>
        </div>

        <div id="log" class="mt-4">
            <h4>크롤링 로그</h4>
            <div id="logContent" class="log-container"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const crawlerCards = document.querySelectorAll('.crawler-card');
            const crawlerForm = document.getElementById('crawlerForm');
            const selectedCrawlerInput = document.getElementById('selectedCrawler');
            const parameterContainer = document.getElementById('parameterContainer');
            const startButton = document.getElementById('startCrawl');
            const stopButton = document.getElementById('stopCrawl');
            const logContent = document.getElementById('logContent');
            const stats = document.getElementById('stats');
            let eventSource = null;

            // 크롤러 카드 선택 이벤트
            crawlerCards.forEach(card => {
                card.addEventListener('click', async function() {
                    // 이전 선택 제거
                    crawlerCards.forEach(c => c.classList.remove('selected'));
                    // 현재 카드 선택
                    this.classList.add('selected');
                    
                    const crawlerType = this.dataset.crawler;
                    selectedCrawlerInput.value = crawlerType;
                    
                    // 파라미터 정보 가져오기
                    try {
                        const response = await fetch(`/crawler/params/${crawlerType}`);
                        const parameters = await response.json();
                        
                        // 파라미터 UI 생성
                        parameterContainer.innerHTML = '';
                        parameters.forEach(param => {
                            const col = document.createElement('div');
                            col.className = 'col-md-4 mb-3';
                            
                            let input;
                            if (param.type === 'select' && param.options) {
                                input = document.createElement('select');
                                input.className = 'form-select';
                                param.options.forEach(option => {
                                    const opt = document.createElement('option');
                                    opt.value = option.value;
                                    opt.textContent = option.label;
                                    if (option.value === param.default) {
                                        opt.selected = true;
                                    }
                                    input.appendChild(opt);
                                });
                            } else {
                                input = document.createElement('input');
                                input.className = 'form-control';
                                input.type = param.type;
                                input.value = param.default || '';
                                if (param.min !== undefined) input.min = param.min;
                                if (param.max !== undefined) input.max = param.max;
                            }
                            
                            input.id = param.name;
                            input.name = param.name;
                            
                            const label = document.createElement('label');
                            label.className = 'form-label';
                            label.htmlFor = param.name;
                            label.textContent = param.label;
                            
                            col.appendChild(label);
                            col.appendChild(input);
                            parameterContainer.appendChild(col);
                        });
                        
                        // 폼 표시 및 시작 버튼 활성화
                        crawlerForm.classList.add('show');
                        startButton.disabled = false;
                    } catch (error) {
                        console.error('파라미터 정보를 가져오는데 실패했습니다:', error);
                    }
                });
            });

            // 크롤링 시작
            crawlerForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // 폼 데이터 수집
                const formData = new FormData(this);
                const params = new URLSearchParams();
                for (let [key, value] of formData.entries()) {
                    params.append(key, value);
                }
                
                // 이전 EventSource 연결 종료
                if (eventSource) {
                    eventSource.close();
                }
                
                // 새로운 EventSource 연결
                eventSource = new EventSource(`/crawl/stream?${params.toString()}`);
                startButton.disabled = true;
                stopButton.disabled = false;
                stats.style.display = 'block';
                logContent.innerHTML = '';
                
                eventSource.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    
                    // 로그 메시지 추가
                    const messageDiv = document.createElement('div');
                    messageDiv.textContent = data.message;
                    logContent.appendChild(messageDiv);
                    logContent.scrollTop = logContent.scrollHeight;
                    
                    // 통계 업데이트
                    updateStats(data);
                    
                    // 크롤링 완료 또는 중지 시
                    if (data.status === 'completed' || data.status === 'stopped' || data.status === 'error') {
                        eventSource.close();
                        startButton.disabled = false;
                        stopButton.disabled = true;
                    }
                };
                
                eventSource.onerror = function() {
                    eventSource.close();
                    startButton.disabled = false;
                    stopButton.disabled = true;
                };
            });

            function updateStats(data) {
                if (data.stats) {
                    document.getElementById('totalItems').textContent = data.stats.totalItems;
                    document.getElementById('newItems').textContent = data.stats.newItems;
                    document.getElementById('existingItems').textContent = data.stats.existingItems;
                }
            }

            stopButton.addEventListener('click', async function(e) {
                e.preventDefault();
                try {
                    const response = await fetch('/crawl/stop', {
                        method: 'POST'
                    });
                    const data = await response.json();
                    const messageDiv = document.createElement('div');
                    messageDiv.textContent = data.message;
                    logContent.appendChild(messageDiv);
                    logContent.scrollTop = logContent.scrollHeight;
                } catch (error) {
                    const messageDiv = document.createElement('div');
                    messageDiv.textContent = '중지 요청 중 오류가 발생했습니다.';
                    logContent.appendChild(messageDiv);
                    logContent.scrollTop = logContent.scrollHeight;
                }
            });
        });
    </script>
</body>
</html>
